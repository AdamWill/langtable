======================================================================
lang-table
======================================================================

Purpose of this package
=======================

lang-table is used to guess reasonable defaults for locale, keyboard,
territory, …, if part of that information is already known. For
example, guess the territory and the keyboard layout if the language
is known or guess the language and keyboard layout if the territory is
already known.

License
=======

GPLv3+, see the included file “COPYING”.

Translations for languages and territory names are from CLDR
which is governed by teh Unicode Terms of Use, see the included
file “unicode-license.txt”.

Installation
============

To install lang-table, run

     make install DESTDIR=/usr

To create a distribution tarball run

     make dist

To run the test cases in the source directory:

     make test-local

To run the test cases using the installed files:

     make install DESTDIR=/usr
     make test DESTDIR=/usr

How to use it
=============

Some examples to show the usage (More examples are in the file test_cases.txt):

Initialization:

    $ python
    Python 2.7.3 (default, Aug  9 2012, 17:23:57) 
    [GCC 4.7.1 20120720 (Red Hat 4.7.1-5)] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> import langtable
    import langtable
    >>> langtable.init()
    langtable.init()

Querying the possible locales for the language “German”:

    >>> langtable.list_locales(languageId="de")
    langtable.list_locales(languageId="de")
    ['de_DE.UTF-8', 'de_AT.UTF-8', 'de_CH.UTF-8', 'de_BE.UTF-8', 'de_LU.UTF-8']

So this returns a list of locales for German. These lists are sorted in order
of decreasing likelyhood, i.e. the most common value comes first.

One can also query the possible locales for the territory “Switzerland”:

    >>> langtable.list_locales(territoryId="CH")
    langtable.list_locales(territoryId="CH")
    ['de_CH.UTF-8', 'fr_CH.UTF-8', 'it_CH.UTF-8', 'wae_CH.UTF-8']

If one knows both, the language “German” and the territory “Switzerland”, the result is
unique:

    >>> langtable.list_locales(languageId="de", territoryId="CH")
    langtable.list_locales(languageId="de", territoryId="CH")
    ['de_CH.UTF-8']

Listing likely X11 keyboard layouts for “German”:

    >>> langtable.list_keyboards(languageId="de")
    langtable.list_keyboards(languageId="de")
    ['de(nodeadkeys)', 'de(deadacute)', 'at(nodeadkeys)', 'ch', 'be(oss)']

Listing likely X11 keyboard layouts for “Switzerland”:

    >>> langtable.list_keyboards(territoryId="CH")
    langtable.list_keyboards(territoryId="CH")
    ['ch', 'ch(fr)', 'it']

When specifying both “German” *and* “Switzerland”, the returned
X11 keyboard layout is unique:

    >>> langtable.list_keyboards(languageId="de", territoryId="CH")
    langtable.list_keyboards(languageId="de", territoryId="CH")
    ['ch']

One can also query the translations of language names:

    >>> print langtable.language_name(languageId="sr").encode("UTF-8")
    print langtable.language_name(languageId="sr").encode("UTF-8")
    Српски

I.e. the endonym for “Serbian” in the default Cyrillic script is “Српски”.
And in Latin script it is:

    >>> print langtable.language_name(languageId="sr", scriptId="Latn").encode("UTF-8")
    print langtable.language_name(languageId="sr", scriptId="Latn").encode("UTF-8")
    Srpski

And “Serbian” translated to “English” is:

    >>> print langtable.language_name(languageId="sr", languageIdQuery="en").encode("UTF-8")
    print langtable.language_name(languageId="sr", languageIdQuery="en").encode("UTF-8")
    Serbian

Names for territories can also be queried:

    >>> print langtable.territory_name(territoryId="CH", languageIdQuery="de").encode("UTF-8")
    print langtable.territory_name(territoryId="CH", languageIdQuery="de").encode("UTF-8")
    Schweiz
    >>> print langtable.territory_name(territoryId="CH", languageIdQuery="it").encode("UTF-8")
    print langtable.territory_name(territoryId="CH", languageIdQuery="it").encode("UTF-8")
    Svizzera
    >>>
